import 'package:bloc/bloc.dart';
import 'package:todo_list_bloc_freezed/blocs/todo_list_bloc/todo_list_event.dart';
import 'package:todo_list_bloc_freezed/blocs/todo_list_bloc/todo_list_state.dart';
import '../../models/todo_model.dart';


class TodoListBloc extends Bloc<TodoListEvent, TodoListState> {
  TodoListBloc() : super(TodoListState.initial()) {
    on<TodoListEvent>((event, emit) async {
      await event.when(
          addTodo: (String todoDesc) => _onAddTodo(todoDesc, emit),
          editTodo: (id, desc) => _onEditTodo(id, desc, emit),
          toggleTodo: (String id) => _onToggleTodo(id, emit),
          removeTodo: (String id) => _onRemoveTodo(id, emit)
      );
    });
  }

  _onAddTodo(String todoDesc, Emitter<TodoListState> emit) {
    Todo todo = Todo.add(todoDesc);
    final newTodos = [...state.todos, todo];
    emit(state.copyWith(todos: newTodos));
  }

  _onEditTodo(String editTodoId, editTodoDesc, Emitter<TodoListState> emit) {
    final newTodos = state.todos.map((Todo todo) {
      if (todo.id == editTodoId) {
        return Todo(
          id: editTodoId,
          desc: editTodoDesc,
          completed: todo.completed,
        );
      }
      return todo;
    }).toList();
    emit(state.copyWith(todos: newTodos));
  }

  _onToggleTodo(String todoId, Emitter<TodoListState> emit) {
    final newTodos = state.todos.map((Todo todo) {
      if (todo.id == todoId) {
        return Todo(
          id: todo.id,
          desc: todo.desc,
          completed: !todo.completed,
        );
      }
      return todo;
    }).toList();
    emit(state.copyWith(todos: newTodos));
  }

  _onRemoveTodo(String todoId, Emitter<TodoListState> emit) {
    final newTodos = state.todos.where((element) => element.id != todoId)
        .toList();
    emit(state.copyWith(todos: newTodos));
  }
}


























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































